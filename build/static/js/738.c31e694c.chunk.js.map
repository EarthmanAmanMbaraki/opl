{"version":3,"file":"static/js/738.c31e694c.chunk.js","mappings":"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","sources":["components/sales/create.js","components/customer/create.js","components/customer/customer_add.js","components/sales/upload.js","components/home/download_template.js","components/customer/truck_create.js","components/home/input_section.js","components/utils/_funcs.js","components/utils/header.js","components/utils/layout.js"],"sourcesContent":["import React from 'react';\r\nimport { Form, Row, Col, Button, Alert } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport SpinnerComponent from \"../utils/spinner\"\r\n\r\nimport { SALES_CREATE_ACTION } from '../../redux/actions/actions';\r\n\r\nclass SaleCreateForm extends React.Component {\r\n    state = {\r\n        product: null,\r\n        customer: null,\r\n        truck: null,\r\n        entry_no: \"\",\r\n        order_no: \"\",\r\n        lpo_no: \"\",\r\n        depot: null,\r\n        date: new Date(),\r\n        vol_obs: null,\r\n        vol_20: null,\r\n        selling_price: null,\r\n        products: [],\r\n        paid: true,\r\n\r\n        trucks: [],\r\n        spinner: false,\r\n        success: false,\r\n        null_error: false,\r\n    }\r\n\r\n    componentWillReceiveProps = async (nextProps) => {\r\n\r\n        this.setState({ spinner: false, success: true })\r\n    }\r\n\r\n    handleCustomerSelect = (id) => {\r\n        let customer = this.props.customers[parseInt(id)]\r\n        this.setState({ customer: customer.id, trucks: customer.trucks })\r\n    }\r\n\r\n    onSubmit = async (e) => {\r\n        e.preventDefault()\r\n        const { product, lpo_no, customer, truck, depot, entry_no, order_no, date, vol_obs, vol_20, selling_price, paid } = this.state\r\n\r\n        let items = [product, customer, truck, lpo_no, depot, entry_no, order_no, date, vol_obs, vol_20, selling_price]\r\n        let null_error = false\r\n        for (let i = 0; i < items.length; i++) {\r\n            if (items[i] === null || items[i] === \"\" || items[i] === undefined) {\r\n                null_error = true\r\n            }\r\n        }\r\n\r\n        if (null_error) {\r\n            this.setState({ null_error: true })\r\n        } else {\r\n            this.setState({ spinner: true })\r\n            const { sales_date } = this.props\r\n            await this.props.SALES_CREATE_ACTION(sales_date.start_date, sales_date.end_date, product, lpo_no, customer, truck, depot, entry_no, order_no, date, vol_obs, vol_20, selling_price, paid)\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        const { date, trucks } = this.state\r\n        const { depots, customers, products } = this.props\r\n\r\n        return (\r\n            <div className='upload-form'>\r\n\r\n                {/* SPINNER */}\r\n                {this.state.spinner ?\r\n                    <SpinnerComponent spinner={this.state.spinner} /> : null}\r\n\r\n                {/* FORM */}\r\n                <h4 className='upload-title'>Fill the information</h4>\r\n\r\n                {/* If successful */}\r\n                {this.state.success ?\r\n                    <Alert variant={\"success\"} size=\"sm\">\r\n                        Entry Created successful\r\n                    </Alert> : null}\r\n\r\n                {/* Null error */}\r\n                {this.state.null_error ?\r\n                    <Alert variant={\"danger\"} size=\"sm\">\r\n                        All the fields must be field\r\n                    </Alert> : null}\r\n\r\n\r\n\r\n                <Form onSubmit={this.onSubmit}>\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Date</Form.Label>\r\n                        <Form.Control type=\"date\" placeholder=\"Date\" size='sm' value={date} onChange={(e) => this.setState({ date: e.target.value })} />\r\n                    </Form.Group>\r\n\r\n                    <Row style={{ marginTop: 0, height: 'auto' }}>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Depot</Form.Label>\r\n                                <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.setState({ depot: e.target.value })}>\r\n                                    <option>Select</option>\r\n                                    {depots.map((depot, idx) =>\r\n                                        <option value={depot.id}>{depot.name}</option>\r\n                                    )}\r\n\r\n\r\n                                </Form.Select>\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Customer</Form.Label>\r\n                                <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.handleCustomerSelect(e.target.value)}>\r\n                                    <option>Select</option>\r\n                                    {customers.map((customer, idx) =>\r\n                                        <option value={idx}>{customer.name}</option>\r\n                                    )}\r\n\r\n\r\n                                </Form.Select>\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Truck</Form.Label>\r\n                                <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.setState({ truck: e.target.value })}>\r\n                                    <option>Select</option>\r\n                                    {trucks.map((truck) =>\r\n                                        <option value={truck.id}>{truck.plate_no} - {truck.driver.first_name}</option>\r\n                                    )}\r\n                                </Form.Select>\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                    </Row>\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Product</Form.Label>\r\n                        <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.setState({ product: e.target.value })}>\r\n                            <option>Select</option>\r\n                            {products.map((product) =>\r\n                                <option value={product.id}>{product.name}</option>\r\n                            )}\r\n\r\n\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n                    <h6 className='upload-form__details'>Details</h6>\r\n\r\n\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Order No</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Order No\" size='sm' onChange={(e) => this.setState({ order_no: e.target.value })} />\r\n                    </Form.Group>\r\n                    <Row style={{ marginTop: 0, height: 'auto' }}>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Lpo no</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Lpo no\" size='sm' onChange={(e) => this.setState({ lpo_no: e.target.value })} />\r\n                            </Form.Group>\r\n\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Entry no</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Entry No\" size='sm' onChange={(e) => this.setState({ entry_no: e.target.value })} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Row style={{ marginTop: 0, height: 'auto' }}>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Vol OBS</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Vol OBS\" size='sm' onChange={(e) => this.setState({ vol_obs: e.target.value })} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Vol@20</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Vol@20\" size='sm' onChange={(e) => this.setState({ vol_20: e.target.value })} />\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Selling Price</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Selling price\" size='sm' onChange={(e) => this.setState({ selling_price: e.target.value })} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Paid</Form.Label>\r\n                        <div key={`inline-radio`} className=\"mb-3\">\r\n\r\n                            <Form.Check\r\n                                inline\r\n                                label=\"Yes\"\r\n                                name=\"group1\"\r\n                                type={\"radio\"}\r\n                                id={`inline-radio-1`}\r\n                                onClick={() => this.setState({ paid: true })}\r\n                            />\r\n                            <Form.Check\r\n                                inline\r\n                                label=\"No\"\r\n                                name=\"group1\"\r\n                                type={\"radio\"}\r\n                                id={`inline-radio-2`}\r\n                                onClick={() => this.setState({ paid: false })}\r\n                            />\r\n\r\n                        </div>\r\n                    </Form.Group>\r\n                    <div align='center'>\r\n                        <Button variant='primary' type='submit'>Upload</Button>\r\n                    </div>\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        depots: (state.list_reducer.depot_list ? state.list_reducer.depot_list : []),\r\n        products: (state.list_reducer.product_list ? state.list_reducer.product_list : []),\r\n        customers: (state.list_reducer.customer_list ? state.list_reducer.customer_list : []),\r\n        sales_list: (state.list_reducer.sales_list ? state.list_reducer.sales_list : []),\r\n        sales_date: state.update_reducer.sales_date,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    SALES_CREATE_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(SaleCreateForm);\r\n","import React from 'react';\r\nimport { Form, Button, Alert } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { Triangle } from \"react-loader-spinner\"\r\nimport { CUSTOMER_CREATE_ACTION } from '../../redux/actions/actions';\r\n\r\nclass CustomerUpload extends React.Component {\r\n    state = {\r\n        name: \"\",\r\n        location: \"\",\r\n        spinner: false,\r\n        success: false,\r\n        null_error: false,\r\n        show_errors: false,\r\n        customer_list: this.props.customer_list,\r\n    }\r\n\r\n    static getDerivedStateFromProps = async (props, state) => {\r\n\r\n        if (props.customer_list === undefined) {\r\n            return null\r\n        }\r\n\r\n        else if (state.customer_list === undefined && props.customer_list !== undefined) {\r\n\r\n            state.spinner = false\r\n            state.success = true\r\n            state.null_error = false\r\n        }\r\n        else if (props.customer_list.length > state.customer_list.length) {\r\n            state.spinner = false\r\n            state.success = true\r\n            state.null_error = false\r\n        }\r\n        state.customer_list = props.customer_list\r\n        return state\r\n    }\r\n\r\n    onSubmit = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const { name, location } = this.state\r\n\r\n        if (name === \"\" || location === \"\") {\r\n            this.setState({ null_error: true })\r\n        } else {\r\n            this.setState({ spinner: true })\r\n            await this.props.CUSTOMER_CREATE_ACTION(name, location)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className='upload-form'>\r\n                {this.state.spinner ?\r\n                    <div className=\"spinner\">\r\n                        <Triangle\r\n\r\n                            color=\"#00BFFF\"\r\n                            height={100}\r\n                            width={100}\r\n                            timeout={4000} //3 secs\r\n                            visible={this.state.spinner}\r\n\r\n                        />\r\n                    </div> : null}\r\n                <h4>Create Customer</h4>\r\n\r\n                {/* If successful */}\r\n                {this.state.success ?\r\n                    <Alert variant={\"success\"} size=\"sm\">\r\n                        Customer created successful\r\n                    </Alert> : null}\r\n\r\n                {/* IF null error */}\r\n                {this.state.null_error ?\r\n                    <Alert variant={\"danger\"} size=\"sm\">\r\n                        The fields cannot be empty\r\n                    </Alert> : null}\r\n\r\n                {/* IF errors */}\r\n                {/* {this.state.show_errors ?\r\n                    Object.keys(this.props.error).map((key, idx) =>\r\n                        <Alert key={idx} variant=\"danger\">{key}: {this.props.create_customer_error[key][0]}</Alert>\r\n                    )\r\n                    : null} */}\r\n\r\n\r\n                <Form onSubmit={this.onSubmit} id=\"sub\">\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Customer name</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Name\" size='sm' value={this.state.name}\r\n                            onChange={(e) => this.setState({ name: e.target.value, success: false, null_error: false, show_errors: false })} />\r\n                    </Form.Group>\r\n\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Code</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Name\" size='sm' value={this.state.location}\r\n                            onChange={(e) => this.setState({ location: e.target.value, success: false, null_error: false, show_errors: false })} />\r\n\r\n                    </Form.Group>\r\n\r\n                    <div>\r\n                        <Button variant='primary' type='submit' size='sm' id=\"add_customer\">Create</Button>\r\n                    </div>\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        customer_list: state.list_reducer.customer_list,\r\n        // error: (state.create_reducer.create_customer_error ? state.create_reducer.create_customer_error : null),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    CUSTOMER_CREATE_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CustomerUpload);\r\n","import React from 'react';\r\nimport { Form, Button, Alert, Row, Col } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { Triangle } from \"react-loader-spinner\"\r\nimport { ADD_CUSTOMER_ACTION, ADD_CUSTOMER_REMOVE_ACTION } from '../../redux/actions/actions';\r\n\r\nclass CustomerAdd extends React.Component {\r\n    state = {\r\n        customer: null,\r\n        depot: null,\r\n        spinner: false,\r\n        success: false,\r\n        null_error: false,\r\n        show_errors: false,\r\n    }\r\n\r\n    static getDerivedStateFromProps = (props, state) => {\r\n        if (props.add_customer !== undefined) {\r\n            if (props.add_customer.status === \"success\") {\r\n                state.spinner = false\r\n                state.success = true\r\n                state.null_error = false\r\n            }\r\n            else {\r\n                state.spinner = false\r\n                state.show_errors = true\r\n            }\r\n        }\r\n        return state\r\n    }\r\n\r\n    handleCustomerSelect = (id) => {\r\n        this.setState({ customer: id })\r\n    }\r\n    handleDepotSelect = (id) => {\r\n        this.setState({ depot: id })\r\n    }\r\n    onSubmit = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const { depot, customer } = this.state\r\n\r\n        if (depot === null || customer === null) {\r\n            this.setState({ null_error: true })\r\n        } else {\r\n            this.setState({ spinner: true })\r\n            await this.props.ADD_CUSTOMER_ACTION(depot, customer)\r\n        }\r\n\r\n    }\r\n    componentDidMount = async () => {\r\n        await this.props.ADD_CUSTOMER_REMOVE_ACTION()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='upload-form'>\r\n                {this.state.spinner ?\r\n                    <div className=\"spinner\">\r\n                        <Triangle\r\n\r\n                            color=\"#00BFFF\"\r\n                            height={100}\r\n                            width={100}\r\n                            timeout={4000} //3 secs\r\n                            visible={this.state.spinner}\r\n\r\n                        />\r\n                    </div> : null}\r\n                <h4>Add Customer</h4>\r\n\r\n                {/* If successful */}\r\n                {this.state.success ?\r\n                    <Alert variant={\"success\"} size=\"sm\">\r\n                        Customer Added successfull\r\n                    </Alert> : null}\r\n\r\n                {/* IF null error */}\r\n                {this.state.null_error ?\r\n                    <Alert variant={\"danger\"} size=\"sm\">\r\n                        The fields cannot be empty\r\n                    </Alert> : null}\r\n\r\n                {/* IF errors */}\r\n                {this.state.show_errors ?\r\n\r\n                    <Alert variant=\"danger\">Something went wrong!</Alert>\r\n\r\n                    : null}\r\n\r\n                <Form onSubmit={this.onSubmit} id=\"sub\">\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Depot</Form.Label>\r\n                        <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.handleDepotSelect(e.target.value)}>\r\n                            <option>Select</option>\r\n                            {this.props.depots.map((depot, idx) =>\r\n                                <option value={depot.id}>{depot.name}</option>\r\n                            )}\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Customer</Form.Label>\r\n                        <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.handleCustomerSelect(e.target.value)}>\r\n                            <option>Select</option>\r\n                            {this.props.customers.map((customer, idx) =>\r\n                                <option value={customer.id}>{customer.name}</option>\r\n                            )}\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n\r\n\r\n\r\n                    <div>\r\n                        <Button variant='primary' type='submit' size='sm' id=\"add_customer\">Add</Button>\r\n                    </div>\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        customers: state.list_reducer.customer_list,\r\n        depots: state.list_reducer.depot_list,\r\n        add_customer: state.update_reducer.add_customer,\r\n        // error: (state.create_reducer.create_customer_error ? state.create_reducer.create_customer_error : null),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    ADD_CUSTOMER_ACTION,\r\n    ADD_CUSTOMER_REMOVE_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(CustomerAdd);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Form, Alert, Button } from 'react-bootstrap'\r\nimport { Triangle } from \"react-loader-spinner\"\r\n\r\nimport { UPLOAD_EXCEL_ACTION } from \"../../redux/actions/actions\"\r\n\r\nclass UploadExcel extends React.Component {\r\n\r\n    state = {\r\n        file: null,\r\n        spinner: false,\r\n        success: false,\r\n        show_error: false,\r\n        null_error: false,\r\n        depot: null,\r\n    }\r\n\r\n    componentWillReceiveProps = async (nextProps) => {\r\n        if (nextProps.upload_excel_error) {\r\n            this.setState({ show_error: true, spinner: false })\r\n        } else {\r\n            this.setState({ spinner: false, success: true })\r\n        }\r\n\r\n    }\r\n\r\n    onSubmit = async (event) => {\r\n        event.preventDefault()\r\n        const { file, depot } = this.state\r\n        if (file === null || depot === null) {\r\n            this.setState({ null_error: true })\r\n        } else {\r\n            this.setState({ spinner: true })\r\n            await this.props.UPLOAD_EXCEL_ACTION(file, depot)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='upload-form'>\r\n                {this.state.spinner ?\r\n                    <div className=\"spinner\">\r\n                        <Triangle\r\n\r\n                            color=\"#00BFFF\"\r\n                            height={100}\r\n                            width={100}\r\n                            timeout={4000} //3 secs\r\n                            visible={this.state.spinner}\r\n\r\n                        />\r\n                    </div> : null}\r\n                <h5>Upload File</h5>\r\n\r\n                {/* If successful */}\r\n                {this.state.success ?\r\n                    <Alert variant={\"success\"} size=\"sm\">\r\n                        File Uploaded successful\r\n                    </Alert> : null}\r\n\r\n                {/* If error */}\r\n                {this.state.show_error ?\r\n                    <Alert variant={\"danger\"} size=\"sm\">\r\n                        {this.props.upload_excel_error.message}\r\n                    </Alert> : null}\r\n\r\n                {/* If null */}\r\n                {this.state.null_error ?\r\n                    <Alert variant={\"danger\"} size=\"sm\">\r\n                        All the field must be filled\r\n                    </Alert> : null}\r\n\r\n                <Form onSubmit={this.onSubmit}>\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Depot</Form.Label>\r\n                        <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.setState({ depot: e.target.value })}>\r\n                            <option>Select</option>\r\n                            {this.props.depot_list.map((depot) =>\r\n                                <option value={depot.id}>{depot.name}</option>\r\n                            )}\r\n\r\n\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>File</Form.Label>\r\n                        <Form.Control\r\n                            type=\"file\"\r\n                            accept=\".xlsx, .xls, .csv\"\r\n                            placeholder=\"File\"\r\n                            size='sm'\r\n                            onChange={(e) => this.setState({ file: e.target.files[0] })}\r\n                        />\r\n                    </Form.Group>\r\n\r\n                    <div>\r\n                        <Button\r\n                            variant='primary'\r\n                            type='submit'\r\n\r\n                            value={this.state.file}\r\n                            size='sm'\r\n                        >\r\n                            Upload\r\n                        </Button>\r\n                    </div>\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        uploaded_excel: state.update_reducer.uploaded_excel,\r\n        upload_excel_error: state.update_reducer.upload_excel_error,\r\n        depot_list: state.list_reducer.depot_list,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    UPLOAD_EXCEL_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(UploadExcel);\r\n","import React from 'react';\r\nimport { URL } from \"../../utils/_consts\"\r\nimport { Form, Button } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\n\r\nclass DownloadTemplate extends React.Component {\r\n    state = {\r\n        depot: null,\r\n    }\r\n\r\n    onSubmit = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const { depot } = this.state\r\n\r\n        window.open(`${URL}/depot/download/${parseInt(depot)}/`, \"_blank\")\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className='upload-form'>\r\n                <h4>Download Template</h4>\r\n\r\n\r\n                <Form onSubmit={this.onSubmit}>\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Depot</Form.Label>\r\n                        <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.setState({ depot: e.target.value })}>\r\n                            <option>Select</option>\r\n                            {this.props.depot_list.map((depot) =>\r\n                                <option value={depot.id}>{depot.name}</option>\r\n                            )}\r\n\r\n\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n\r\n\r\n                    <div>\r\n                        <Button variant='primary' type='submit' size='sm'>Download</Button>\r\n                    </div>\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        depot_list: state.list_reducer.depot_list,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DownloadTemplate);\r\n","import React from 'react';\r\nimport { Form, Button, Alert, Row, Col } from 'react-bootstrap';\r\nimport { connect } from 'react-redux';\r\nimport { Triangle } from \"react-loader-spinner\"\r\nimport { TRUCK_CREATE_ACTION } from '../../redux/actions/actions';\r\n\r\nclass TruckUpload extends React.Component {\r\n    state = {\r\n        customer: null,\r\n        customers: [],\r\n        customer_index: null,\r\n        plate_no: \"\",\r\n        first_name: \"\",\r\n        last_name: \"\",\r\n        spinner: false,\r\n        success: false,\r\n        null_error: false,\r\n        show_errors: false,\r\n        customer_list: this.props.customer_list,\r\n    }\r\n\r\n    static getDerivedStateFromProps = async (props, state) => {\r\n\r\n        if (state.customer_index !== null) {\r\n            if (props.customers[parseInt(state.customer_index)].trucks.length > state.customers[parseInt(state.customer_index)].trucks.length) {\r\n                state.spinner = false\r\n                state.success = true\r\n                state.null_error = false\r\n                state.show_errors = false\r\n            }\r\n        }\r\n        state.customers = props.customers\r\n        return state\r\n    }\r\n\r\n    handleCustomerSelect = (idx) => {\r\n        const customer = this.props.customers[idx]\r\n        this.setState({ customer: customer.id, customer_index: idx })\r\n    }\r\n    onSubmit = async (event) => {\r\n        event.preventDefault()\r\n\r\n        const { customer, plate_no, first_name, last_name } = this.state\r\n\r\n        if (plate_no === \"\" || first_name == \"\" || last_name == \"\") {\r\n            this.setState({ null_error: true })\r\n        } else {\r\n            this.setState({ spinner: true })\r\n            await this.props.TRUCK_CREATE_ACTION(customer, plate_no, first_name, last_name)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className='upload-form'>\r\n                {this.state.spinner ?\r\n                    <div className=\"spinner\">\r\n                        <Triangle\r\n\r\n                            color=\"#00BFFF\"\r\n                            height={100}\r\n                            width={100}\r\n                            timeout={4000} //3 secs\r\n                            visible={this.state.spinner}\r\n\r\n                        />\r\n                    </div> : null}\r\n                <h4>Add Truck</h4>\r\n\r\n                {/* If successful */}\r\n                {this.state.success ?\r\n                    <Alert variant={\"success\"} size=\"sm\">\r\n                        Truck created successful\r\n                    </Alert> : null}\r\n\r\n                {/* IF null error */}\r\n                {this.state.null_error ?\r\n                    <Alert variant={\"danger\"} size=\"sm\">\r\n                        The fields cannot be empty\r\n                    </Alert> : null}\r\n\r\n                {/* IF errors */}\r\n                {/* {this.state.show_errors ?\r\n                    Object.keys(this.props.error).map((key, idx) =>\r\n                        <Alert key={idx} variant=\"danger\">{key}: {this.props.create_customer_error[key][0]}</Alert>\r\n                    )\r\n                    : null} */}\r\n\r\n                <Form onSubmit={this.onSubmit} id=\"sub\">\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Customer</Form.Label>\r\n                        <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.handleCustomerSelect(e.target.value)}>\r\n                            <option>Select</option>\r\n                            {this.props.customers.map((customer, idx) =>\r\n                                <option value={idx}>{customer.name}</option>\r\n                            )}\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n                    <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                        <Form.Label>Plate No</Form.Label>\r\n                        <Form.Control type=\"text\" placeholder=\"Name\" size='sm' value={this.state.plate_no}\r\n                            onChange={(e) => this.setState({ plate_no: e.target.value, success: false, null_error: false, show_errors: false })} />\r\n                    </Form.Group>\r\n                    <h6 className='upload-form__details'>Driver</h6>\r\n                    <Row>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>First Name</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Name\" size='sm' value={this.state.first_name}\r\n                                    onChange={(e) => this.setState({ first_name: e.target.value, success: false, null_error: false, show_errors: false })} />\r\n\r\n                            </Form.Group>\r\n                        </Col>\r\n                        <Col>\r\n                            <Form.Group className=\"mb-2\" controlId=\"exampleForm.ControlInput1\">\r\n                                <Form.Label>Last Name</Form.Label>\r\n                                <Form.Control type=\"text\" placeholder=\"Name\" size='sm' value={this.state.last_name}\r\n                                    onChange={(e) => this.setState({ last_name: e.target.value, success: false, null_error: false, show_errors: false })} />\r\n\r\n                            </Form.Group>\r\n                        </Col>\r\n                    </Row>\r\n\r\n\r\n                    <div>\r\n                        <Button variant='primary' type='submit' size='sm' id=\"add_customer\">Add</Button>\r\n                    </div>\r\n\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        customers: state.list_reducer.customer_list,\r\n        // error: (state.create_reducer.create_customer_error ? state.create_reducer.create_customer_error : null),\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    TRUCK_CREATE_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TruckUpload);\r\n","import React from 'react';\r\nimport Popup from 'reactjs-popup';\r\nimport { connect } from 'react-redux';\r\nimport { MdOutlineAddCircle, MdCalendarToday, MdKeyboardArrowDown, MdCloudDownload, MdOpacity } from \"react-icons/md\";\r\nimport { SiMicrosoftexcel } from \"react-icons/si\";\r\nimport { GiMoneyStack } from \"react-icons/gi\";\r\n\r\nimport { DateRangePicker } from 'react-date-range';\r\nimport { Button, Form } from 'react-bootstrap'\r\nimport 'react-date-range/dist/styles.css'; // main style file\r\nimport 'react-date-range/dist/theme/default.css'; // theme css file\r\nimport 'reactjs-popup/dist/index.css';\r\nimport {\r\n    UPDATE_DASHBOARD_METRIC_ACTION,\r\n    UPDATE_SELECTION_DATES_ACTION,\r\n    UPDATE_PRODUCT_SERIES_ACTION,\r\n    GET_PRODUCT_SERIES_ACTION,\r\n    GET_DEPOT_SERIES_ACTION,\r\n    GET_DEPOT_PRODUCT_SERIES_ACTION,\r\n} from \"../../redux/actions/actions\"\r\n\r\nimport SaleCreateForm from \"../sales/create\"\r\nimport CustomerUpload from '../customer/create';\r\nimport AddCustomer from '../customer/customer_add';\r\n\r\nimport UploadExcel from '../sales/upload';\r\nimport DownloadTemplate from './download_template';\r\nimport TruckUpload from '../customer/truck_create';\r\n\r\nclass InputComponent extends React.Component {\r\n    state = {\r\n        startDate: this.props.selection_dates.startDate,\r\n        endDate: this.props.selection_dates.endDate,\r\n        dashboard_metric: this.props.dashboard_metric,\r\n        key: 'selection',\r\n    }\r\n\r\n    handleMetricChange = async (value) => {\r\n        if (value === \"revenue\") {\r\n            await this.props.UPDATE_DASHBOARD_METRIC_ACTION(true)\r\n        } else {\r\n            await this.props.UPDATE_DASHBOARD_METRIC_ACTION(false)\r\n        }\r\n\r\n    }\r\n    handleSelect = async (ranges) => {\r\n        let id = this.props.depot_list[parseInt(this.props.depot)].id\r\n\r\n        this.setState({\r\n            startDate: ranges.selection.startDate,\r\n            endDate: ranges.selection.endDate\r\n        })\r\n\r\n        await this.props.UPDATE_SELECTION_DATES_ACTION({\r\n            startDate: ranges.selection.startDate,\r\n            endDate: ranges.selection.endDate\r\n        })\r\n        await this.props.GET_PRODUCT_SERIES_ACTION(ranges.selection.startDate, ranges.selection.endDate)\r\n        await this.props.UPDATE_PRODUCT_SERIES_ACTION()\r\n        await this.props.GET_DEPOT_SERIES_ACTION(id, ranges.selection.startDate, ranges.selection.endDate)\r\n        await this.props.GET_DEPOT_PRODUCT_SERIES_ACTION(id, ranges.selection.startDate, ranges.selection.endDate)\r\n\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const { selection_dates, dashboard_metric } = props\r\n        if (typeof (selection_dates.startDate === \"string\")) {\r\n            state.startDate = new Date(`${selection_dates.startDate}`)\r\n            state.endDate = new Date(`${selection_dates.endDate}`)\r\n        } else {\r\n            state.startDate = selection_dates.startDate\r\n            state.endDate = selection_dates.endDate\r\n        }\r\n        state.dashboard_metric = dashboard_metric\r\n        return state\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className='buttons'>\r\n                <Popup trigger={\r\n                    <Button className='input-dates' size='sm'>\r\n                        <div className='input-dates__input-display'>\r\n                            <span><MdCalendarToday color='#D04D30' size={18} /></span>\r\n                            {this.state.startDate.toDateString()} - {this.state.endDate.toDateString()}\r\n                            <span>\r\n                                <MdKeyboardArrowDown size={18} />\r\n                            </span>\r\n                        </div>\r\n\r\n                    </Button>\r\n                }\r\n                    position=\"bottom\"\r\n                >\r\n                    <DateRangePicker\r\n                        onChange={this.handleSelect}\r\n                        showSelectionPreview={true}\r\n                        moveRangeOnFirstSelection={false}\r\n                        months={2}\r\n                        ranges={[this.state]}\r\n                        direction=\"horizontal\"\r\n                        preventSnapRefocus={true}\r\n                        calendarFocus=\"backwards\"\r\n                        className='input-date__date-range'\r\n                    />\r\n                </Popup>\r\n                <div className='metrics'>\r\n                    <Button\r\n                        variant={this.state.dashboard_metric ? \"info\" : \"secondary\"}\r\n                        size='sm'\r\n                        className='metrics__add-button'\r\n                        style={{ color: \"black\" }}\r\n                        onClick={() => this.handleMetricChange(\"revenue\")}\r\n                    >\r\n                        <GiMoneyStack color=\"green\" size={20} />\r\n                        Revenue\r\n                    </Button>\r\n                    <Button\r\n                        variant={this.state.dashboard_metric === false ? \"info\" : \"secondary\"}\r\n                        size='sm'\r\n                        className='metrics__add-button'\r\n                        style={{ color: \"black\" }}\r\n                        onClick={() => this.handleMetricChange(\"quantities\")}\r\n                    >\r\n                        <MdOpacity color=\"orange\" size={20} />\r\n                        Quantities\r\n                    </Button>\r\n                </div>\r\n                <div className='form'>\r\n                    <Popup\r\n                        contentStyle={{ width: 300 }}\r\n                        trigger={\r\n                            <Button\r\n                                variant=\"secondary\"\r\n                                size='sm'\r\n                                className='form__add-button'\r\n                                style={{ color: \"black\" }}\r\n                            >\r\n                                <MdCloudDownload color=\"green\" size={20} />\r\n                                Template\r\n                            </Button>\r\n                        }\r\n                        position=\"bottom\"\r\n                    >\r\n                        <DownloadTemplate />\r\n                    </Popup>\r\n\r\n                    <Popup\r\n                        contentStyle={{ width: 300 }}\r\n                        trigger={\r\n                            <Button variant=\"secondary\" size='sm' className='form__add-button' style={{ color: \"black\" }}>\r\n                                <SiMicrosoftexcel color=\"green\" size={20} />\r\n                                Upload\r\n                            </Button>\r\n                        }\r\n                        position=\"bottom center\"\r\n\r\n                    >\r\n                        <UploadExcel />\r\n\r\n                    </Popup>\r\n\r\n                    <Popup\r\n                        contentStyle={{ width: 300 }}\r\n                        trigger={\r\n                            <Button variant=\"info\" size='sm' className='form__add-button'>\r\n                                <MdOutlineAddCircle color=\"#e9e7ec\" size={20} />\r\n                                Customer\r\n                            </Button>\r\n                        }\r\n                        position=\"bottom center\"\r\n\r\n                    >\r\n                        <AddCustomer />\r\n                        <CustomerUpload />\r\n\r\n                    </Popup>\r\n\r\n                    <Popup\r\n                        contentStyle={{ width: 300 }}\r\n                        trigger={\r\n                            <Button variant=\"info\" size='sm' className='form__add-button'>\r\n                                <MdOutlineAddCircle color=\"#e9e7ec\" size={20} />\r\n                                Truck\r\n                            </Button>\r\n                        }\r\n                        position=\"bottom center\"\r\n\r\n                    >\r\n                        <TruckUpload />\r\n\r\n                    </Popup>\r\n\r\n                    <Popup\r\n                        contentStyle={{ width: 500, minHeight: 400 }}\r\n                        trigger={\r\n                            <Button variant=\"primary\" size='sm' className='form__add-button'>\r\n                                <MdOutlineAddCircle color=\"#e9e7ec\" size={20} />\r\n                                Add Order\r\n                            </Button>\r\n                        }\r\n                        position=\"left top\"\r\n\r\n                    >\r\n                        <SaleCreateForm />\r\n\r\n                    </Popup>\r\n                </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n\r\n        selection_dates: state.update_reducer.selection_dates,\r\n        dashboard_metric: state.update_reducer.dashboard_metric,\r\n        depot: state.update_reducer.depot,\r\n        depot_list: state.list_reducer.depot_list,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    UPDATE_DASHBOARD_METRIC_ACTION,\r\n    UPDATE_SELECTION_DATES_ACTION,\r\n    GET_PRODUCT_SERIES_ACTION,\r\n    GET_DEPOT_SERIES_ACTION,\r\n    GET_DEPOT_PRODUCT_SERIES_ACTION,\r\n    UPDATE_PRODUCT_SERIES_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(InputComponent);","export const addMonths = (date, months) => {\r\n    date.setMonth(date.getMonth() + months);\r\n    return date;\r\n}\r\n\r\nexport const currency_type_display = (currency_type) => {\r\n    if (currency_type === \"Million\") {\r\n        return \"m\"\r\n    }\r\n    else {\r\n        return \"k\"\r\n    }\r\n}\r\n\r\nexport const truncate = (num) => {\r\n    return parseFloat(num.toString().match(/^-?\\d+(?:\\.\\d{0,2})?/)[0])\r\n}","import React from \"react\";\r\nimport { Button, Form } from \"react-bootstrap\"\r\nimport { connect } from \"react-redux\"\r\nimport { UPDATE_CURRENCY_TYPE_ACTION } from \"../../redux/actions/actions\"\r\n\r\nclass HeaderComponent extends React.Component {\r\n    state = {\r\n        currency_type: this.props.currency_type\r\n    }\r\n\r\n    static getDerivedStateFromProps = async (props, state) => {\r\n        state.currency_type = props.currency_type\r\n        return state\r\n    }\r\n\r\n    handleCurrencyTypeChange = async (currency_type) => {\r\n\r\n        this.props.UPDATE_CURRENCY_TYPE_ACTION(currency_type)\r\n    }\r\n    render() {\r\n        const currency_types = [\"Million\", \"Thousand\"]\r\n\r\n        return (\r\n            <div className=\"header\">\r\n                <h5>{this.props.header_title}</h5>\r\n                <div className=\"header__left\">\r\n\r\n                    <Form.Group className=\"header__currency\" controlId=\"exampleForm.ControlInput1\">\r\n                        {/* <Form.Label>Product</Form.Label> */}\r\n                        <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.handleCurrencyTypeChange(e.target.value)}>\r\n                            <option>{this.state.currency_type}</option>\r\n                            {currency_types.map((currency_type, idx) =>\r\n                                this.state.currency_type === currency_type ? null : <option key={idx} value={currency_type}>{currency_type}</option>\r\n                            )}\r\n                        </Form.Select>\r\n                    </Form.Group>\r\n\r\n                    <Button variant=\"secondary\" size=\"sm\">{this.props.first_name[0]}{this.props.last_name[0]}</Button>\r\n                    <p className=\"header__header-name\">{this.props.first_name} {this.props.last_name}</p>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        currency_type: state.update_reducer.currency_type,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    UPDATE_CURRENCY_TYPE_ACTION\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps, mapDispatchToProps\r\n)(HeaderComponent);","import React from \"react\";\r\nimport { Container, Button } from 'react-bootstrap'\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { MdLogout, MdDashboard, MdOutlineListAlt, MdPeople, MdAnchor } from \"react-icons/md\";\r\nimport { Link, Navigate, NavLink } from \"react-router-dom\";\r\nimport HeaderComponent from \"./header\";\r\nimport { URL } from \"../../utils/_consts\";\r\nimport { USER_LOGGED_OUT_ACTION } from \"../../redux/actions/actions\"\r\n\r\nclass Layout extends React.Component {\r\n    state = {\r\n        redirect: false,\r\n    }\r\n\r\n    handleLogOut = () => {\r\n        this.props.USER_LOGGED_OUT_ACTION()\r\n        this.setState({ redirect: true })\r\n\r\n    }\r\n    render() {\r\n\r\n        if (this.state.redirect) {\r\n            return <Navigate to={\"/login\"} />\r\n        }\r\n        return (\r\n            <Container fluid className=\"layout_main\">\r\n\r\n                <div className=\"layout_main__side\">\r\n                    <Link to=\"/\" className=\"layout_main__logo\">\r\n                        <img src={`${URL}/static/opl_logo.png`} alt=\"logo\" className=\"layout_main__logo--img\" />\r\n                    </Link>\r\n\r\n                    <div className=\"layout_main__links\">\r\n                        {this.props.token.is_staff === true ?\r\n                            <NavLink to=\"/\" className=\"layout_main__button\">\r\n                                <h6><span className=\"layout_main__links--span\"><MdDashboard size={20} color=\"#D04D30\" /></span>Dashboard</h6>\r\n                            </NavLink> : null}\r\n\r\n                        <NavLink to=\"/depots\" className=\"layout_main__button\">\r\n                            <h6><span className=\"layout_main__links--span\"><MdAnchor /></span>Depots</h6>\r\n                        </NavLink>\r\n\r\n                        {this.props.token.is_staff === true ?\r\n                            <NavLink to=\"/sales\" className=\"layout_main__button\">\r\n                                <h6><span className=\"layout_main__links--span\"><MdOutlineListAlt /></span>Sales</h6>\r\n                            </NavLink> : null}\r\n\r\n                        {this.props.token.is_staff === true ?\r\n                            <NavLink to=\"/customers\" className=\"layout_main__button\">\r\n                                <h6><span className=\"layout_main__links--span\"><MdPeople /></span>Customers</h6>\r\n                            </NavLink> : null}\r\n                        <Button variant=\"transparent\" className=\"layout_main__button layout_main__logout\" onClick={this.handleLogOut}>\r\n                            <h6><span className=\"layout_main__links--span\"><MdLogout /></span>Log Out</h6>\r\n                        </Button>\r\n                    </div>\r\n                </div>\r\n                <div className=\"layout_main__component\">\r\n                    <HeaderComponent header_title={this.props.header_title} first_name={this.props.token.data.first_name} last_name={this.props.token.data.last_name} />\r\n                    {this.props.children}\r\n                </div>\r\n\r\n            </Container>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        token: state.auth_reducer.token,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    USER_LOGGED_OUT_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(Layout);\r\n"],"names":["SaleCreateForm","state","product","customer","truck","entry_no","order_no","lpo_no","depot","date","Date","vol_obs","vol_20","selling_price","products","paid","trucks","spinner","success","null_error","componentWillReceiveProps","nextProps","setState","handleCustomerSelect","id","props","customers","parseInt","onSubmit","e","preventDefault","items","i","length","undefined","sales_date","SALES_CREATE_ACTION","start_date","end_date","this","depots","className","Alert","variant","size","Form","controlId","type","placeholder","value","onChange","target","Row","style","marginTop","height","Col","map","idx","name","plate_no","driver","first_name","inline","label","onClick","align","Button","React","mapDispatchToProps","connect","list_reducer","depot_list","product_list","customer_list","sales_list","update_reducer","CustomerUpload","location","show_errors","event","CUSTOMER_CREATE_ACTION","color","width","timeout","visible","getDerivedStateFromProps","CustomerAdd","handleDepotSelect","ADD_CUSTOMER_ACTION","componentDidMount","ADD_CUSTOMER_REMOVE_ACTION","add_customer","status","UploadExcel","file","show_error","upload_excel_error","UPLOAD_EXCEL_ACTION","message","accept","files","uploaded_excel","DownloadTemplate","window","open","URL","TruckUpload","customer_index","last_name","TRUCK_CREATE_ACTION","InputComponent","startDate","selection_dates","endDate","dashboard_metric","key","handleMetricChange","UPDATE_DASHBOARD_METRIC_ACTION","handleSelect","ranges","selection","UPDATE_SELECTION_DATES_ACTION","GET_PRODUCT_SERIES_ACTION","UPDATE_PRODUCT_SERIES_ACTION","GET_DEPOT_SERIES_ACTION","GET_DEPOT_PRODUCT_SERIES_ACTION","trigger","toDateString","position","showSelectionPreview","moveRangeOnFirstSelection","months","direction","preventSnapRefocus","calendarFocus","contentStyle","minHeight","addMonths","setMonth","getMonth","currency_type_display","currency_type","truncate","num","parseFloat","toString","match","HeaderComponent","handleCurrencyTypeChange","UPDATE_CURRENCY_TYPE_ACTION","header_title","Layout","redirect","handleLogOut","USER_LOGGED_OUT_ACTION","to","Container","fluid","src","alt","token","is_staff","data","children","auth_reducer"],"sourceRoot":""}