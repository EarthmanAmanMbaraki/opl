{"version":3,"file":"static/js/12.d978a63d.chunk.js","mappings":"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","sources":["components/home/charts/product_month.js","components/home/charts/product_series.js","components/utils/select/product_month_select.js","components/home/charts/depot_pie_chart.js","components/utils/select/depot_month_select.js","components/home/chart_section.js","components/utils/select/top_customer_select.js","components/home/customer.js","components/home/index.js"],"sourcesContent":["import React from \"react\"\r\nimport ReactApexChart from 'react-apexcharts'\r\nimport { MONTHS } from \"../../../utils/_consts\"\r\nimport SpinnerComponent from \"../../utils/spinner\"\r\nimport { currency_type_display, truncate } from \"../../utils/_funcs\"\r\n\r\nconst mapData = (data, currency_type) => {\r\n\r\n    let months = new Array(12).fill(0)\r\n    for (const month in data) {\r\n        let month_value = data[month]\r\n        months[month_value.date__month - 1] = currency_type === \"Million\" ? truncate(month_value.sum / 1000000) : truncate(month_value.sum / 1000)\r\n    }\r\n    return months\r\n}\r\n\r\nclass ProductMonth extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const year = new Date().getFullYear();\r\n        this.state = {\r\n            spinner: false,\r\n            series: [],\r\n            options: {\r\n                chart: {\r\n                    type: 'bar',\r\n                    height: 350\r\n                },\r\n                plotOptions: {\r\n                    bar: {\r\n                        horizontal: false,\r\n                        columnWidth: '55%',\r\n                        endingShape: 'rounded'\r\n                    },\r\n                },\r\n                dataLabels: {\r\n                    enabled: false\r\n                },\r\n                title: {\r\n                    text: this.props.dashboard_metric ? `${year} Products Trends by Month's Revenue` : `${year} Products Trends by Month's Quantity`,\r\n                    align: 'left'\r\n                },\r\n                stroke: {\r\n                    show: true,\r\n                    width: 2,\r\n                    colors: ['transparent']\r\n                },\r\n                xaxis: {\r\n                    categories: MONTHS,\r\n                },\r\n                yaxis: {\r\n                    title: {\r\n                        text: this.props.dashboard_metric ? \"Kshs (Millions)\" : \"Litres\"\r\n                    }\r\n                },\r\n                fill: {\r\n                    opacity: 1\r\n                },\r\n                tooltip: {\r\n                    y: {\r\n                        formatter: this.props.dashboard_metric ? function (val) {\r\n                            return `Kshs ${val} Millions`\r\n                        } : function (val) {\r\n                            return `${val} Litres`\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n\r\n\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps = (props, state) => {\r\n        const products = props.product_month\r\n        const year = props.product_month_year\r\n        if (props.update_product_month === true) {\r\n            state.spinner = true\r\n            return state\r\n        } else {\r\n            state.spinner = false\r\n        }\r\n        let series = []\r\n\r\n        for (let i = 0; i < products.length; i++) {\r\n            let product = products[i]\r\n            series = series.concat(\r\n                {\r\n                    name: product.name,\r\n                    data: props.dashboard_metric ? mapData(product.revenue, props.currency_type) : mapData(product.quantity, props.currency_type)\r\n                }\r\n            )\r\n        }\r\n\r\n        state.series = series\r\n        state.options.title.text = props.dashboard_metric ? `${year} Products Trends by Month's Revenue` : `${year} Products Trends by Month's Quantity`\r\n        state.options.yaxis.title.text = props.dashboard_metric ? `Kshs (${props.currency_type})` : `Litres (${props.currency_type})`\r\n        state.options.tooltip.y.formatter = props.dashboard_metric ? function (val) {\r\n            return `Kshs ${val}${currency_type_display(props.currency_type)}`\r\n        } : function (val) {\r\n            return `${val}${currency_type_display(props.currency_type)} Litres`\r\n        }\r\n        return state\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div id=\"chart\" style={{ marginTop: 20 }}>\r\n                {this.state.spinner ? <div style={{ height: 350, position: \"relative\" }}><SpinnerComponent spinner={this.state.spinner} /> </div> :\r\n                    <ReactApexChart options={this.state.options} series={this.state.series} type=\"bar\" height={350} />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default ProductMonth;","import React from 'react'\r\nimport ReactApexChart from 'react-apexcharts'\r\nimport ApexCharts from 'apexcharts';\r\n\r\nimport { currency_type_display, truncate } from '../../utils/_funcs';\r\nimport SpinnerComponent from '../../utils/spinner';\r\n\r\nconst mapData = (data, currency_type) => {\r\n\r\n    let values = []\r\n    let maxs = []\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n\r\n\r\n        values.push([data[i].timestamp, currency_type === \"Million\" ? truncate(data[i].sum / 1000000) : truncate(data[i].sum / 1000)])\r\n    }\r\n\r\n    return values\r\n}\r\n\r\n\r\n\r\nconst update = (props, currency_type) => {\r\n    let data = props.product_series\r\n    let series = []\r\n    for (let i = 0; i < data.length; i++) {\r\n        let prod = props.dashboard_metric ? data[i].revenue : data[i].quantity\r\n        let d = mapData(prod, currency_type)\r\n        series = series.concat({\r\n            name: data[i].name,\r\n            data: d\r\n        })\r\n    }\r\n\r\n    return series\r\n}\r\nclass ProductSeries extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            currency_type: this.props.currency_type,\r\n            selection_dates: this.props.selection_dates,\r\n            product_series: this.props.product_series,\r\n            spinner: false,\r\n            series: [],\r\n            options: {\r\n                chart: {\r\n                    id: 'area-datetime',\r\n                    type: 'area',\r\n                    height: 400,\r\n                    zoom: {\r\n                        autoScaleYaxis: false\r\n                    }\r\n                },\r\n                title: {\r\n                    text: this.props.dashboard_metric ? \"Revenue\" : \"Quantities\"\r\n                },\r\n                annotations: {\r\n\r\n                    xaxis: [{\r\n                        x: new Date(`${this.props.selection_dates.startDate}`).getTime(),\r\n                        borderColor: '#999',\r\n                        yAxisIndex: 0,\r\n\r\n                    }]\r\n                },\r\n                dataLabels: {\r\n                    enabled: true\r\n                },\r\n                markers: {\r\n                    size: 0,\r\n                    style: 'hollow',\r\n                },\r\n                xaxis: {\r\n                    type: 'datetime',\r\n                    // min: new Date(`${this.props.selection_dates.startDate}`).getTime(),\r\n                    // max: new Date(`${this.props.selection_dates.endDate}`).getTime(),\r\n                    tickAmount: 5,\r\n                },\r\n                yaxis: {\r\n                    title: {\r\n                        text: this.props.dashboard_metric ? `Kshs (${this.props.currency_type})` : `Litres (${this.props.currency_type})`\r\n                    },\r\n                    min: 0,\r\n\r\n                },\r\n                tooltip: {\r\n                    y: {\r\n                        formatter: this.props.dashboard_metric ? function (val) {\r\n                            return `Kshs ${val} Millions`\r\n                        } : function (val) {\r\n                            return `${val} Litres`\r\n                        }\r\n                    }\r\n                },\r\n\r\n            },\r\n            selection: 'one_month',\r\n\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps = async (props, state) => {\r\n\r\n        const { dashboard_metric, selection_dates, currency_type, update_product_series } = props\r\n\r\n        if (update_product_series === true) {\r\n            state.spinner = true\r\n            return state\r\n        }\r\n\r\n        state.spinner = false\r\n\r\n        if (typeof (selection_dates.startDate) === \"string\") {\r\n            selection_dates.startDate = new Date(`${selection_dates.startDate}`)\r\n            selection_dates.endDate = new Date(`${selection_dates.endDate}`)\r\n        }\r\n        let data = update(props, currency_type)\r\n        state.currency_type = props.currency_type\r\n        state.series = data\r\n        state.options.title.text = dashboard_metric ? \"Revenue\" : \"Quantities\"\r\n        // state.options.xaxis.min = selection_dates.startDate.getTime()\r\n        // state.options.xaxis.max = selection_dates.endDate.getTime()\r\n        // state.options.yaxis.max = data[1] + 2\r\n        let c = currency_type\r\n        state.options.yaxis.title.text = dashboard_metric ? `Kshs (${c})` : `Litres (${c})`\r\n\r\n        state.options.tooltip.y.formatter = dashboard_metric ? function (val) {\r\n            return `Kshs ${val}${currency_type_display(currency_type)}`\r\n        } : function (val) {\r\n            return `${val}${currency_type_display(currency_type)} Litres`\r\n        }\r\n\r\n        state.selection_dates = selection_dates\r\n        state.product_series = props.product_series\r\n        return state\r\n    }\r\n\r\n    render() {\r\n        try {\r\n\r\n            ApexCharts.exec(\r\n                'area-datetime',\r\n                'zoomX',\r\n                new Date(`${this.state.selection_dates.startDate}`).getTime(),\r\n                new Date(`${this.state.selection_dates.endDate}`).getTime(),\r\n\r\n            )\r\n        } catch (e) {\r\n            \"in error\"\r\n        }\r\n        return (\r\n            <div id=\"chart-timeline\">\r\n                {this.state.spinner ? <div style={{ height: 400, position: \"relative\" }}> <SpinnerComponent spinner={this.state.spinner} /></div> :\r\n                    <ReactApexChart options={this.state.options} series={this.state.series} type=\"area\" height={400} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ProductSeries","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\"\r\nimport { connect } from \"react-redux\"\r\nimport { UPDATE_PRODUCT_MONTH_YEAR_ACTION, GET_PRODUCT_MONTH_ACTION, UPDATE_PRODUCT_MONTH_ACTION } from \"../../../redux/actions/actions\"\r\n\r\nclass ProductMonthYearSelect extends React.Component {\r\n    state = {\r\n        year: this.props.product_month_year\r\n    }\r\n\r\n    static getDerivedStateFromProps = (props, state) => {\r\n        state.year = props.product_month_year\r\n        return state\r\n    }\r\n\r\n    handleYearChange = async (year) => {\r\n        await this.props.UPDATE_PRODUCT_MONTH_ACTION()\r\n        await this.props.UPDATE_PRODUCT_MONTH_YEAR_ACTION(year)\r\n        await this.props.GET_PRODUCT_MONTH_ACTION(year)\r\n    }\r\n    render() {\r\n        const years = [2022, 2021]\r\n\r\n        return (\r\n            <div>\r\n                <Form.Group className=\"mb-4 pie-select__child\" controlId=\"exampleForm.ControlInput1\">\r\n                    <Form.Label>Year</Form.Label>\r\n                    <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.handleYearChange(e.target.value)}>\r\n                        <option>{this.state.year}</option>\r\n                        {years.map((year, idx) =>\r\n                            parseInt(this.state.year) === year ? null : <option key={idx} value={year}>{year}</option>\r\n                        )}\r\n\r\n                    </Form.Select>\r\n                </Form.Group>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        product_month_year: state.update_reducer.product_month_year,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    UPDATE_PRODUCT_MONTH_YEAR_ACTION,\r\n    GET_PRODUCT_MONTH_ACTION,\r\n    UPDATE_PRODUCT_MONTH_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(ProductMonthYearSelect);\r\n","import React from \"react\";\r\nimport ReactApexChart from \"react-apexcharts\"\r\nimport SpinnerComponent from \"../../utils/spinner\";\r\nimport { truncate, currency_type_display } from \"../../utils/_funcs\"\r\n\r\nconst mapData = (data, month = 13, currency_type) => {\r\n\r\n\r\n    let months = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\r\n    let total = 0\r\n    for (let i = 0; i < data.length; i++) {\r\n\r\n        let month_value = data[i]\r\n\r\n\r\n        months[month_value.date__month - 1] = currency_type === \"Million\" ? truncate(month_value.sum / 1000000) : truncate(month_value.sum / 1000)\r\n        total = total + month_value.sum\r\n\r\n    }\r\n\r\n    if (month === 13) {\r\n        return currency_type === \"Million\" ? truncate(total / 1000000) : truncate(total / 1000)\r\n    } else {\r\n\r\n        return months[month]\r\n    }\r\n}\r\nclass DepotPieChart extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            spinner: false,\r\n            series: [],\r\n            options: {\r\n                chart: {\r\n                    width: 180,\r\n                    type: 'donut',\r\n                },\r\n                labels: [],\r\n                plotOptions: {\r\n                    pie: {\r\n                        startAngle: -90,\r\n                        endAngle: 270\r\n                    }\r\n                },\r\n                dataLabels: {\r\n                    enabled: true\r\n                },\r\n                fill: {\r\n                    type: 'gradient',\r\n                },\r\n                tooltip: {\r\n                    y: {\r\n                        formatter: this.props.dashboard_metric ? function (val) {\r\n                            return `Kshs ${val} Millions`\r\n                        } : function (val) {\r\n                            return `${val} Litres`\r\n                        }\r\n                    }\r\n                },\r\n                title: {\r\n                    text: this.props.dashboard_metric ? 'Depots Comparison by Revenue' : 'Depots Comparison by Quantity'\r\n                },\r\n                responsive: [{\r\n                    breakpoint: 480,\r\n                    options: {\r\n                        chart: {\r\n                            width: 200,\r\n                        },\r\n\r\n                    }\r\n                }]\r\n            },\r\n\r\n\r\n        };\r\n    }\r\n\r\n\r\n\r\n    static getDerivedStateFromProps = (props, state) => {\r\n        let depot_month = props.depot_month\r\n        let labels = []\r\n        let values = []\r\n        let year = parseInt(props.depot_month_year)\r\n        let month = parseInt(props.depot_month_month)\r\n        if (props.update_depot_month) {\r\n            state.spinner = true\r\n            return state\r\n        } else {\r\n            state.spinner = false\r\n        }\r\n        for (let i = 0; i < depot_month.length; i++) {\r\n            let depot = depot_month[i]\r\n            labels.push(depot.name)\r\n\r\n            depot = props.dashboard_metric ? depot.revenue : depot.quantity\r\n\r\n            values.push(mapData(depot, month, props.currency_type))\r\n        }\r\n\r\n        state.series = values\r\n        state.options.labels = labels\r\n        state.options.title.text = props.dashboard_metric ? 'Depots Comparison by Revenue' : 'Depots Comparison by Quantity'\r\n        state.options.tooltip.y.formatter = props.dashboard_metric ? function (val) {\r\n            return `Kshs ${val}${currency_type_display(props.currency_type)}`\r\n        } : function (val) {\r\n            return `${val}${currency_type_display(props.currency_type)} Litres`\r\n        }\r\n        return state\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const sum = this.state.series.reduce((partialSum, a) => partialSum + a, 0);\r\n\r\n        return (\r\n\r\n            <div id=\"chart\">\r\n                {this.state.spinner ? <div style={{ position: \"relative\", height: 350 }}><SpinnerComponent spinner={this.state.spinner} /></div> :\r\n                    <div>\r\n                        {sum === 0 ?\r\n                            <p className=\"no-data\">No data for this year this month. Select another month or switch years</p>\r\n                            :\r\n                            <ReactApexChart options={this.state.options} series={this.state.series} type=\"donut\" width={400} />\r\n                        }\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n\r\n\r\n        );\r\n    }\r\n}\r\nexport default DepotPieChart;","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\"\r\nimport { connect } from \"react-redux\"\r\nimport { UPDATE_DEPOT_MONTH_MONTH_ACTION, UPDATE_DEPOT_MONTH_YEAR_ACTION, GET_DEPOT_MONTH_ACTION, UPDATE_DEPOT_MONTH_ACTION } from \"../../../redux/actions/actions\"\r\n\r\n\r\nclass DepotMonthSelect extends React.Component {\r\n    state = {\r\n        year: this.props.depot_month_year,\r\n        month: this.props.depot_month_month,\r\n    }\r\n\r\n    static getDerivedStateFromProps = (props, state) => {\r\n        if (state.year !== props.depot_month_year || state.month !== props.depot_month_month) {\r\n            state.year = props.depot_month_year\r\n            state.month = props.depot_month_month\r\n            return state\r\n        }\r\n        return null\r\n\r\n    }\r\n\r\n    handleYearChange = async (year) => {\r\n        await this.props.UPDATE_DEPOT_MONTH_ACTION()\r\n        await this.props.UPDATE_DEPOT_MONTH_YEAR_ACTION(year)\r\n        await this.props.GET_DEPOT_MONTH_ACTION(year)\r\n    }\r\n\r\n    handleMonthChange = async (month) => {\r\n        await this.props.UPDATE_DEPOT_MONTH_MONTH_ACTION(month)\r\n    }\r\n\r\n    render() {\r\n        const years = [2022, 2021]\r\n        const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n        return (\r\n            <div className=\"pie-select\">\r\n                <Form.Group className=\"mb-4 pie-select__child\" controlId=\"exampleForm.ControlInput1\">\r\n                    <Form.Label>Year</Form.Label>\r\n                    <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.handleYearChange(e.target.value)}>\r\n                        <option>{this.state.year}</option>\r\n                        {years.map((year, idx) =>\r\n                            parseInt(this.state.year) === year ? null : <option key={idx} value={year}>{year}</option>\r\n                        )}\r\n\r\n                    </Form.Select>\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-4 pie-select__child\" controlId=\"exampleForm.ControlInput1\">\r\n                    <Form.Label>Month</Form.Label>\r\n                    <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.handleMonthChange(e.target.value)}>\r\n                        {parseInt(this.state.month) === 13 ? null : <option value={this.state.month}>{months[parseInt(this.state.month)]}</option>}\r\n                        <option value={13}>All</option>\r\n                        {months.map((month, idx) =>\r\n                            parseInt(this.state.month) === idx ? null : <option key={idx} value={idx}>{month}</option>\r\n                        )}\r\n\r\n                    </Form.Select>\r\n                </Form.Group>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        depot_month_month: state.update_reducer.depot_month_month,\r\n        depot_month_year: state.update_reducer.depot_month_year,\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    UPDATE_DEPOT_MONTH_MONTH_ACTION,\r\n    UPDATE_DEPOT_MONTH_YEAR_ACTION,\r\n    GET_DEPOT_MONTH_ACTION,\r\n    UPDATE_DEPOT_MONTH_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(DepotMonthSelect);\r\n","import React from 'react';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport ProductMonth from './charts/product_month';\r\nimport ProductSeries from './charts/product_series';\r\nimport ProductMonthYearSelect from '../utils/select/product_month_select';\r\nimport DepotPieChart from './charts/depot_pie_chart';\r\nimport DepotMonthSelect from '../utils/select/depot_month_select';\r\n\r\nclass ChartSection extends React.Component {\r\n    render() {\r\n\r\n        return (\r\n            <div className='charts-section'>\r\n                <Row >\r\n                    <Col>\r\n                        <div className='chart-area'>\r\n                            <ProductSeries\r\n                                product_series={this.props.product_series}\r\n                                selection_dates={this.props.selection_dates}\r\n                                dashboard_metric={this.props.dashboard_metric}\r\n                                currency_type={this.props.currency_type}\r\n                                update_product_series={this.props.update_product_series}\r\n                            />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={7}>\r\n                        <div className='chart-area'>\r\n                            <ProductMonthYearSelect />\r\n                            <ProductMonth\r\n                                product_month={this.props.product_month}\r\n                                dashboard_metric={this.props.dashboard_metric}\r\n                                currency_type={this.props.currency_type}\r\n                                product_month_year={this.props.product_month_year}\r\n                                update_product_month={this.props.update_product_month}\r\n                            />\r\n                        </div>\r\n                    </Col>\r\n                    <Col xs={5}>\r\n                        <div className='chart-area'>\r\n                            <DepotMonthSelect />\r\n                            <DepotPieChart\r\n                                depot_month={this.props.depot_month}\r\n                                dashboard_metric={this.props.dashboard_metric}\r\n                                depot_month_month={this.props.depot_month_month}\r\n                                depot_month_year={this.props.depot_month_year}\r\n                                currency_type={this.props.currency_type}\r\n                                update_depot_month={this.props.update_depot_month}\r\n                            />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChartSection;","import React from \"react\";\r\nimport { Form } from \"react-bootstrap\"\r\nimport { connect } from \"react-redux\"\r\nimport {\r\n    UPDATE_TOP_CUSTOMER_MONTH_ACTION,\r\n    UPDATE_TOP_CUSTOMER_YEAR_ACTION,\r\n    UPDATE_TOP_CUSTOMER_PRODUCT_ACTION,\r\n    GET_TOP_CUSTOMER_ACTION,\r\n    GET_PRODUCT_TOP_CUSTOMER_ACTION,\r\n    UPDATE_TOP_CUSTOMER_ACTION,\r\n} from \"../../../redux/actions/actions\"\r\n\r\n\r\nclass TopCustomerSelect extends React.Component {\r\n    state = {\r\n        year: this.props.top_customer_year,\r\n        month: parseInt(this.props.top_customer_month),\r\n        product_list: this.props.product_list,\r\n        product: this.props.top_customer_product,\r\n    }\r\n\r\n    static getDerivedStateFromProps = (props, state) => {\r\n\r\n        state.year = props.top_customer_year\r\n        state.month = parseInt(props.top_customer_month)\r\n        state.product = props.top_customer_product\r\n        state.product_list = props.product_list\r\n        return state\r\n    }\r\n\r\n    handleChange = async (year, month, product) => {\r\n        await this.props.UPDATE_TOP_CUSTOMER_ACTION()\r\n        if (product === \"All\" && month === 13) {\r\n            await this.props.GET_TOP_CUSTOMER_ACTION(year, \"False\")\r\n        }\r\n        else if (product === \"All\" && month !== 13) {\r\n            await this.props.GET_TOP_CUSTOMER_ACTION(year, \"True\")\r\n        }\r\n        else if (product !== \"All\" && month === 13) {\r\n            await this.props.GET_PRODUCT_TOP_CUSTOMER_ACTION(year, \"False\")\r\n        }\r\n        else if (product !== \"All\" && month !== 13) {\r\n            await this.props.GET_PRODUCT_TOP_CUSTOMER_ACTION(year, \"True\")\r\n        }\r\n\r\n        await this.props.UPDATE_TOP_CUSTOMER_YEAR_ACTION(year)\r\n        await this.props.UPDATE_TOP_CUSTOMER_MONTH_ACTION(month)\r\n        await this.props.UPDATE_TOP_CUSTOMER_PRODUCT_ACTION(product)\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const years = [2022, 2021]\r\n        const months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\r\n        const product_list = this.state.product_list\r\n        const { year, month, product } = this.state\r\n\r\n        return (\r\n            <div className=\"pie-select\">\r\n                <Form.Group className=\"mb-4 pie-select__child\" controlId=\"exampleForm.ControlInput1\">\r\n                    <Form.Label>Year</Form.Label>\r\n                    <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.handleChange(e.target.value, month, product)}>\r\n                        <option>{this.state.year}</option>\r\n                        {years.map((year, idx) =>\r\n                            parseInt(this.state.year) === year ? null : <option key={idx} value={year}>{year}</option>\r\n                        )}\r\n\r\n                    </Form.Select>\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-4 pie-select__child\" controlId=\"exampleForm.ControlInput1\">\r\n                    <Form.Label>Month</Form.Label>\r\n                    <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.handleChange(year, e.target.value, product)}>\r\n\r\n                        {this.state.month === 13 ? null : <option value={this.state.month}>{months[parseInt(this.state.month)]}</option>}\r\n                        <option value={13}>All</option>\r\n\r\n                        {months.map((month, idx) =>\r\n                            parseInt(this.state.month) === idx ? null : <option key={idx} value={idx}>{month}</option>\r\n                        )}\r\n\r\n                    </Form.Select>\r\n                </Form.Group>\r\n\r\n                <Form.Group className=\"mb-4 pie-select__child\" controlId=\"exampleForm.ControlInput1\">\r\n                    <Form.Label>Product</Form.Label>\r\n                    <Form.Select aria-label=\"Default select example\" size='sm' onChange={(e) => this.handleChange(year, month, e.target.value)}>\r\n                        <option>{this.state.product === \"All\" ? \"All\" : this.state.product}</option>\r\n                        {this.state.product === \"All\" ? null : <option value={\"All\"}>All</option>}\r\n                        {product_list.map((product, idx) =>\r\n                            this.state.product === product.name ? null : <option key={idx} value={product.name}>{product.name}</option>\r\n                        )}\r\n\r\n                    </Form.Select>\r\n                </Form.Group>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        top_customer_month: state.update_reducer.top_customer_month,\r\n        top_customer_year: state.update_reducer.top_customer_year,\r\n        top_customer_product: state.update_reducer.top_customer_product,\r\n        product_list: state.list_reducer.product_list ? state.list_reducer.product_list : []\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n    UPDATE_TOP_CUSTOMER_MONTH_ACTION,\r\n    UPDATE_TOP_CUSTOMER_YEAR_ACTION,\r\n    UPDATE_TOP_CUSTOMER_PRODUCT_ACTION,\r\n    GET_TOP_CUSTOMER_ACTION,\r\n    GET_PRODUCT_TOP_CUSTOMER_ACTION,\r\n    UPDATE_TOP_CUSTOMER_ACTION,\r\n};\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(TopCustomerSelect);\r\n","import React from 'react'\r\nimport { Row, Col } from 'react-bootstrap'\r\nimport { MdTrendingDown, MdTrendingUp } from \"react-icons/md\"\r\nimport TopCustomerSelect from '../utils/select/top_customer_select'\r\nimport SpinnerComponent from '../utils/spinner'\r\n\r\nconst update = (props) => {\r\n    let data_type = null\r\n    let customers = []\r\n    let month = props.top_customer_month\r\n    if (props.top_customer_product !== \"All\") {\r\n        let customer = props.product_top_customer.filter(obj => {\r\n            return obj.name === props.top_customer_product\r\n        })\r\n        data_type = customer[0]\r\n\r\n        if (month === 13) {\r\n            customers = props.dashboard_metric ? data_type.revenue : data_type.quantity\r\n        }\r\n        else {\r\n            data_type = props.dashboard_metric ? data_type.revenue : data_type.quantity\r\n            customers = data_type[parseInt(month)].customers\r\n        }\r\n    }\r\n    else {\r\n        data_type = props.dashboard_metric ? props.top_customer.revenue : props.top_customer.quantity\r\n        if (parseInt(month) === 13) {\r\n            customers = data_type\r\n        }\r\n        else {\r\n\r\n            customers = data_type[parseInt(month)].customers\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    return customers\r\n}\r\nclass TopCustomers extends React.Component {\r\n    state = {\r\n        customers: [],\r\n        metric: this.props.dashboard_metric,\r\n        spinner: false\r\n    }\r\n    numberWithCommas = (x) => {\r\n        try {\r\n            return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n        } catch (e) {\r\n            return x\r\n        }\r\n\r\n    }\r\n\r\n\r\n    static getDerivedStateFromProps = (props, state) => {\r\n        if (props.update_top_customer) {\r\n            state.spinner = true\r\n            return state\r\n        } else {\r\n            state.spinner = false\r\n        }\r\n        let customers = update(props)\r\n        state.customers = customers\r\n        state.dashboard_metric = props.dashboard_metric\r\n        return state\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='chart-area top-customers'>\r\n                <TopCustomerSelect />\r\n                {this.state.spinner ? <div style={{ position: \"relative\", height: 350 }}><SpinnerComponent spinner={this.state.spinner} /> </div> :\r\n                    <div>\r\n                        <div className='top-customers__top'>\r\n                            <h6 style={{ marginLeft: 20 }}>Top Customers</h6>\r\n                            <div className='legends'>\r\n                                <div className='legend-item'>\r\n\r\n                                </div>\r\n\r\n                                <div className='legend-item'>\r\n\r\n                                </div>\r\n\r\n                            </div>\r\n                        </div>\r\n\r\n                        <Row className='top_customers__customer-row'>\r\n                            {this.state.customers.slice(0, 8).map((customer, idx) =>\r\n                                <Col key={idx} xs={3}>\r\n\r\n                                    <div className='top-customer' >\r\n                                        <div className='top-customer__total'>\r\n                                            <h5 className='top-customer__amount'>{this.state.dashboard_metric ? \"Kshs.\" : \"Litres.\"} {this.numberWithCommas(customer.sum)}</h5>\r\n\r\n                                        </div>\r\n                                        <div className='top-customer__info'>\r\n                                            <div className='top-customer__profile'>\r\n                                                {/* {customer.increase ? <MdTrendingUp size={30} color='green' /> : <MdTrendingDown size={30} color='red' />} */}\r\n                                            </div>\r\n                                            <div>\r\n                                                <h6 className='top-customer__name'>{customer.customer__name}</h6>\r\n                                                <p className='top-customer__location'>{customer.location}</p>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n\r\n\r\n                                </Col>\r\n                            )}\r\n                            {this.state.customers.length === 0 ? <p className=\"no-data\">No data for this year this month. Select another month or switch years</p> : null}\r\n                        </Row>\r\n                    </div>}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TopCustomers","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nimport InputComponent from \"./input_section\"\r\nimport Layout from \"../utils/layout\";\r\nimport ChartSection from \"./chart_section\";\r\nimport TopCustomers from \"./customer\";\r\n\r\nimport {\r\n\r\n    GET_TOP_CUSTOMER_ACTION,\r\n\r\n    GET_DEPOT_MONTH_ACTION,\r\n\r\n    GET_PRODUCT_SERIES_ACTION, GET_PRODUCT_MONTH_ACTION,\r\n\r\n} from \"../../redux/actions/actions\";\r\nimport { addMonths } from \"../utils/_funcs\";\r\nimport SpinnerComponent from \"../utils/spinner\";\r\n\r\nclass HomePage extends React.Component {\r\n    state = {\r\n        redirect: false,\r\n        currency_type: this.props.currency_type,\r\n        spinner: false,\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const { token, top_customer, depot_month, depot_product_month, product_series, product_month } = props\r\n\r\n        if (token === undefined || token === null) {\r\n            state.redirect = true\r\n            return state\r\n        }\r\n        if (top_customer !== undefined && depot_month !== undefined && product_month !== undefined && product_series !== undefined) {\r\n            state.spinner = false\r\n            return state\r\n        }\r\n        else {\r\n            state.spinner = true\r\n            return state\r\n        }\r\n\r\n        return null\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        this.setState({ spinner: true })\r\n        let end_date = this.props.selection_dates.endDate\r\n        let start_date = this.props.selection_dates.startDate\r\n\r\n        await this.props.GET_PRODUCT_SERIES_ACTION(start_date, end_date)\r\n        await this.props.GET_PRODUCT_MONTH_ACTION(this.props.product_month_year)\r\n        await this.props.GET_DEPOT_MONTH_ACTION(this.props.depot_month_year)\r\n        if (this.props.top_customer_month === 13) {\r\n            await this.props.GET_TOP_CUSTOMER_ACTION(this.props.top_customer_year, \"False\")\r\n        } else {\r\n            await this.props.GET_TOP_CUSTOMER_ACTION(this.props.top_customer_year, \"True\")\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        const { redirect } = this.state\r\n        if (redirect === true) {\r\n            return <Navigate to=\"/login\" />\r\n        }\r\n        console.log(this.props.token)\r\n        return (\r\n            <Layout header_title={\"Dashboard\"} >\r\n                <InputComponent />\r\n\r\n                {this.state.spinner ? <SpinnerComponent spinner={this.state.spinner} /> :\r\n                    <div>\r\n                        <ChartSection\r\n                            product_series={this.props.product_series}\r\n                            product_month={this.props.product_month}\r\n                            depot_month={this.props.depot_month}\r\n\r\n                            selection_dates={this.props.selection_dates}\r\n                            dashboard_metric={this.props.dashboard_metric}\r\n                            currency_type={this.props.currency_type}\r\n                            product_month_year={this.props.product_month_year}\r\n                            depot_month_month={this.props.depot_month_month}\r\n                            depot_month_year={this.props.depot_month_year}\r\n                            update_product_series={this.props.update_product_series}\r\n                            update_product_month={this.props.update_product_month}\r\n                            update_depot_month={this.props.update_depot_month}\r\n\r\n                        />\r\n                        <TopCustomers\r\n                            dashboard_metric={this.props.dashboard_metric}\r\n                            top_customer={this.props.top_customer}\r\n                            top_customer_month={this.props.top_customer_month}\r\n                            top_customer_year={this.props.top_customer_year}\r\n                            product_top_customer={this.props.product_top_customer}\r\n                            top_customer_product={this.props.top_customer_product}\r\n                            update_top_customer={this.props.update_top_customer}\r\n                        />\r\n                    </div>}\r\n            </Layout>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        token: state.auth_reducer.token,\r\n\r\n        top_customer: state.list_reducer.top_customer,\r\n        update_top_customer: state.list_reducer.update_top_customer,\r\n\r\n        depot_month: state.list_reducer.depot_month,\r\n        update_depot_month: state.list_reducer.update_depot_month,\r\n        depot_product_month: state.list_reducer.depot_product_month,\r\n\r\n        product_series: state.list_reducer.product_series,\r\n        update_product_series: state.list_reducer.update_product_series,\r\n        product_month: state.list_reducer.product_month,\r\n        update_product_month: state.list_reducer.update_product_month,\r\n        product_top_customer: state.list_reducer.product_top_customer,\r\n\r\n        dashboard_metric: state.update_reducer.dashboard_metric,\r\n        selection_dates: state.update_reducer.selection_dates,\r\n        currency_type: state.update_reducer.currency_type,\r\n        product_month_year: state.update_reducer.product_month_year,\r\n        depot_month_month: state.update_reducer.depot_month_month,\r\n        depot_month_year: state.update_reducer.depot_month_year,\r\n        top_customer_month: state.update_reducer.top_customer_month,\r\n        top_customer_year: state.update_reducer.top_customer_year,\r\n        top_customer_product: state.update_reducer.top_customer_product,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = {\r\n    GET_TOP_CUSTOMER_ACTION,\r\n\r\n    GET_DEPOT_MONTH_ACTION,\r\n\r\n    GET_PRODUCT_SERIES_ACTION, GET_PRODUCT_MONTH_ACTION,\r\n}\r\n\r\nexport default connect(\r\n    mapStateToProps, mapDispatchToProps\r\n)(HomePage);"],"names":["mapData","data","currency_type","months","Array","fill","month","month_value","date__month","truncate","sum","ProductMonth","props","year","Date","getFullYear","state","spinner","series","options","chart","type","height","plotOptions","bar","horizontal","columnWidth","endingShape","dataLabels","enabled","title","text","dashboard_metric","align","stroke","show","width","colors","xaxis","categories","MONTHS","yaxis","opacity","tooltip","y","formatter","val","id","style","marginTop","this","position","React","getDerivedStateFromProps","products","product_month","product_month_year","update_product_month","i","length","product","concat","name","revenue","quantity","currency_type_display","values","push","timestamp","update","product_series","prod","d","ProductSeries","selection_dates","zoom","autoScaleYaxis","annotations","x","startDate","getTime","borderColor","yAxisIndex","markers","size","tickAmount","min","selection","ApexCharts","endDate","e","update_product_series","c","ProductMonthYearSelect","handleYearChange","UPDATE_PRODUCT_MONTH_ACTION","UPDATE_PRODUCT_MONTH_YEAR_ACTION","GET_PRODUCT_MONTH_ACTION","Form","className","controlId","onChange","target","value","map","idx","parseInt","mapDispatchToProps","connect","update_reducer","total","DepotPieChart","labels","pie","startAngle","endAngle","responsive","breakpoint","reduce","partialSum","a","depot_month","depot_month_year","depot_month_month","update_depot_month","depot","DepotMonthSelect","UPDATE_DEPOT_MONTH_ACTION","UPDATE_DEPOT_MONTH_YEAR_ACTION","GET_DEPOT_MONTH_ACTION","handleMonthChange","UPDATE_DEPOT_MONTH_MONTH_ACTION","ChartSection","Row","Col","xs","TopCustomerSelect","top_customer_year","top_customer_month","product_list","top_customer_product","handleChange","UPDATE_TOP_CUSTOMER_ACTION","GET_TOP_CUSTOMER_ACTION","GET_PRODUCT_TOP_CUSTOMER_ACTION","UPDATE_TOP_CUSTOMER_YEAR_ACTION","UPDATE_TOP_CUSTOMER_MONTH_ACTION","UPDATE_TOP_CUSTOMER_PRODUCT_ACTION","list_reducer","TopCustomers","customers","metric","numberWithCommas","toString","replace","marginLeft","slice","customer","customer__name","location","update_top_customer","data_type","product_top_customer","filter","obj","top_customer","HomePage","redirect","componentDidMount","setState","end_date","start_date","GET_PRODUCT_SERIES_ACTION","to","console","log","token","header_title","depot_product_month","undefined","auth_reducer"],"sourceRoot":""}